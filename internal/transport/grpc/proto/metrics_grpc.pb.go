// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: internal/proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricService_SetUpdates_FullMethodName     = "/metrics.MetricService/SetUpdates"
	MetricService_SetMetric_FullMethodName      = "/metrics.MetricService/SetMetric"
	MetricService_GetMetricValue_FullMethodName = "/metrics.MetricService/GetMetricValue"
	MetricService_GetHTML_FullMethodName        = "/metrics.MetricService/GetHTML"
)

// MetricServiceClient is the client API for MetricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// service for metrics
type MetricServiceClient interface {
	// set batdhed metrics request
	SetUpdates(ctx context.Context, in *SetUpdatesRequest, opts ...grpc.CallOption) (*SetUpdatesResponse, error)
	// set metric from URL
	SetMetric(ctx context.Context, in *SetMetricRequest, opts ...grpc.CallOption) (*SetMetricResponse, error)
	// get metric value by name and type
	GetMetricValue(ctx context.Context, in *GetMetricValueRequest, opts ...grpc.CallOption) (*GetMetricValueResponse, error)
	// get HTML page with metrics
	GetHTML(ctx context.Context, in *GetHTMLRequest, opts ...grpc.CallOption) (*GetHTMLResponse, error)
}

type metricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricServiceClient(cc grpc.ClientConnInterface) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) SetUpdates(ctx context.Context, in *SetUpdatesRequest, opts ...grpc.CallOption) (*SetUpdatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUpdatesResponse)
	err := c.cc.Invoke(ctx, MetricService_SetUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) SetMetric(ctx context.Context, in *SetMetricRequest, opts ...grpc.CallOption) (*SetMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMetricResponse)
	err := c.cc.Invoke(ctx, MetricService_SetMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) GetMetricValue(ctx context.Context, in *GetMetricValueRequest, opts ...grpc.CallOption) (*GetMetricValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricValueResponse)
	err := c.cc.Invoke(ctx, MetricService_GetMetricValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) GetHTML(ctx context.Context, in *GetHTMLRequest, opts ...grpc.CallOption) (*GetHTMLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHTMLResponse)
	err := c.cc.Invoke(ctx, MetricService_GetHTML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricServiceServer is the server API for MetricService service.
// All implementations must embed UnimplementedMetricServiceServer
// for forward compatibility.
//
// service for metrics
type MetricServiceServer interface {
	// set batdhed metrics request
	SetUpdates(context.Context, *SetUpdatesRequest) (*SetUpdatesResponse, error)
	// set metric from URL
	SetMetric(context.Context, *SetMetricRequest) (*SetMetricResponse, error)
	// get metric value by name and type
	GetMetricValue(context.Context, *GetMetricValueRequest) (*GetMetricValueResponse, error)
	// get HTML page with metrics
	GetHTML(context.Context, *GetHTMLRequest) (*GetHTMLResponse, error)
	mustEmbedUnimplementedMetricServiceServer()
}

// UnimplementedMetricServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricServiceServer struct{}

func (UnimplementedMetricServiceServer) SetUpdates(context.Context, *SetUpdatesRequest) (*SetUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpdates not implemented")
}
func (UnimplementedMetricServiceServer) SetMetric(context.Context, *SetMetricRequest) (*SetMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMetric not implemented")
}
func (UnimplementedMetricServiceServer) GetMetricValue(context.Context, *GetMetricValueRequest) (*GetMetricValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricValue not implemented")
}
func (UnimplementedMetricServiceServer) GetHTML(context.Context, *GetHTMLRequest) (*GetHTMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHTML not implemented")
}
func (UnimplementedMetricServiceServer) mustEmbedUnimplementedMetricServiceServer() {}
func (UnimplementedMetricServiceServer) testEmbeddedByValue()                       {}

// UnsafeMetricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServiceServer will
// result in compilation errors.
type UnsafeMetricServiceServer interface {
	mustEmbedUnimplementedMetricServiceServer()
}

func RegisterMetricServiceServer(s grpc.ServiceRegistrar, srv MetricServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricService_ServiceDesc, srv)
}

func _MetricService_SetUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).SetUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricService_SetUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).SetUpdates(ctx, req.(*SetUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_SetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).SetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricService_SetMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).SetMetric(ctx, req.(*SetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_GetMetricValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).GetMetricValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricService_GetMetricValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).GetMetricValue(ctx, req.(*GetMetricValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_GetHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHTMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).GetHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricService_GetHTML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).GetHTML(ctx, req.(*GetHTMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricService_ServiceDesc is the grpc.ServiceDesc for MetricService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUpdates",
			Handler:    _MetricService_SetUpdates_Handler,
		},
		{
			MethodName: "SetMetric",
			Handler:    _MetricService_SetMetric_Handler,
		},
		{
			MethodName: "GetMetricValue",
			Handler:    _MetricService_GetMetricValue_Handler,
		},
		{
			MethodName: "GetHTML",
			Handler:    _MetricService_GetHTML_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/metrics.proto",
}
